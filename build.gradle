buildscript {
    repositories {
        jcenter()
        mavenLocal()
      //  maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'org.codehaus.griffon:gradle-griffon-plugin:2.15.1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.gradle.api.plugins:gradle-izpack-plugin:0.2.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
        classpath 'com.github.cr0:gradle-macappbundle-plugin:3.1.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'de.gliderpilot.gradle.jnlp:gradle-jnlp-plugin:1.2.5'
        classpath 'net.nemerosa:versioning:2.6.1'
      //  classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.2'
    }
}

apply plugin: 'groovy'
apply plugin: 'org.codehaus.griffon.griffon'
apply plugin: 'net.nemerosa.versioning'

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    macosx = System.getProperty('os.name').contains('Mac OS')
}

griffon {
    disableDependencyResolution = false
    includeGroovyDependencies = true
    version = '2.15.1'
    toolkit = 'javafx'
    applicationProperties = [
        'build_date'    : buildDate,
        'build_time'    : buildTime,
        'build_revision': versioning.info.commit
    ]
}

mainClassName = 'com.spw.rr.Launcher'

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/javafx-plugin.gradle'
apply from: 'gradle/integration-test.gradle'
apply from: 'gradle/functional-test.gradle'
apply from: 'gradle/package.gradle'
apply from: 'gradle/docs.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.kordamp.gradle.stats'
//apply plugin: 'com.google.osdetector'

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.kt3k.coveralls'

//ext.platform = osdetector.os != 'osx' ? osdetector.os : 'mac'

dependencies {
    compile "org.codehaus.griffon:griffon-guice:${griffon.version}"
    compile group: 'org.openjfx', name: 'javafx-base', version: '11'
    compile group: 'org.openjfx', name: 'javafx-graphics', version: '11'
    compile group: 'org.openjfx', name: 'javafx-controls', version: '11'
    compile group: 'org.openjfx', name: 'javafx-fxml', version: '11'
    compile 'javax.annotation:javax.annotation-api:1.3.2'
    //runtime "org.slf4j:slf4j-simple:${slf4jVersion}"
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'

    griffon 'org.codehaus.griffon.plugins:griffon-datasource-plugin:2.1.0'
    griffon 'org.codehaus.griffon.plugins:griffon-mybatis-plugin:2.1.0'
    compile group: 'com.github.purejavacomm', name: 'purejavacomm', version: '1.0.2.RELEASE'
    compile group: 'org.mybatis', name: 'mybatis', version: '3.5.5'
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.13'

// https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.3'
    // https://mvnrepository.com/artifact/com.h2database/h2
    runtime group: 'com.h2database', name: 'h2', version: '1.4.199'

    compile group: 'org.jumpmind.symmetric', name: 'symmetric-csv', version: '3.5.19'

    testCompile "org.codehaus.griffon:griffon-javafx-test:${griffon.version}"
    testCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile('org.awaitility:awaitility-groovy:3.1.0') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    //runtime files('/libs/db2jcc4.jar')
    runtime "ibm.db2:db2Driver:1.4.199"
    functionalTestCompile "org.codehaus.griffon:griffon-javafx-test:${griffon.version}"
}


tasks.withType(JavaCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

tasks.withType(GroovyCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*
import java.text.SimpleDateFormat

shadowJar {
    transform(ServiceFileTransformer)
    transform(ServiceFileTransformer) {
        path = 'META-INF/griffon'
    }
    transform(ServiceFileTransformer) {
        path = 'META-INF/types'
    }
    transform(PropertiesFileTransformer) {
        paths = [
            'META-INF/editors/java.beans.PropertyEditor'
        ]
    }
}

startScripts {
    doLast {
        if (!macosx) unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
        windowsScript.text = windowsScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
    }
}

if (hasProperty('debugRun') && ((project.debugRun as boolean))) {
    run {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }
}
