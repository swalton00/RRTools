import java.text.SimpleDateFormat


buildscript {

    repositories {

        mavenCentral()

        gradlePluginPortal()

        mavenLocal()

    }


    dependencies {

        classpath 'org.codehaus.griffon:gradle-griffon-plugin:2.16.0'

        classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0'

        classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'

        classpath 'gradle.plugin.net.nemerosa:versioning:2.15.1'


    }

}


apply plugin: 'groovy'

apply plugin: 'org.codehaus.griffon.griffon'

apply plugin: 'net.nemerosa.versioning'


Date buildTimeAndDate = new Date()

ext {

    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)

    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)

    macosx = System.getProperty('os.name').contains('Mac OS')

}


griffon {

    disableDependencyResolution = false

    includeGroovyDependencies = false

    version = '2.16.0'

    toolkit = 'swing'

    applicationProperties = [

            'build_date'    : buildDate,

            'build_time'    : buildTime,

            'build_revision': versioning.info.commit

    ]

}


mainClassName = 'com.spw.rr.Launcher'


apply from: 'gradle/publishing.gradle'

apply from: 'gradle/code-quality.gradle'

apply plugin: 'com.github.ben-manes.versions'


dependencies {

    annotationProcessor 'org.codehaus.griffon.plugins:griffon-mybatis-core:2.1.0'

    compileOnly 'org.codehaus.griffon.plugins:griffon-mybatis-core:2.1.0'

    runtimeOnly group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.32'

    //runtimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    api "org.codehaus.griffon:griffon-guice:${griffonVersion}"
    griffon 'org.codehaus.griffon.plugins:griffon-miglayout-plugin:2.0.0'

    griffon 'org.codehaus.griffon.plugins:griffon-datasource-plugin:2.1.0'

    compile 'org.codehaus.griffon.plugins:griffon-datasource-core:2.1.0'

    api 'org.codehaus.griffon.plugins:griffon-datasource-core:2.1.0'

    api 'org.codehaus.griffon.plugins:griffon-mybatis-core:2.1.0'
    api "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"

    api 'com.miglayout:miglayout-swing:5.0'

    testImplementation "org.codehaus.griffon:griffon-fest-test:${griffon.version.get()}"

    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"

    testImplementation "org.spockframework:spock-core:${spockVersion}"

    api group: 'com.github.purejavacomm', name: 'purejavacomm', version: '1.0.2.RELEASE'
    runtimeOnly group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.32'

    runtime 'com.h2database:h2:1.4.200'

    runtime "ibm.db2:db2Driver:1.4.199"


    testImplementation "org.codehaus.griffon:griffon-fest-test:${griffonVersion}"

    testImplementation "org.spockframework:spock-core:${spockVersion}"

    testImplementation('org.awaitility:awaitility-groovy:3.1.0') {

        exclude group: 'org.codehaus.groovy', module: 'groovy'

    }

}


task copyHtml(type: Copy) {

    from "../docs/target/generated-docs/html5"

    into "build/resources/main"

}


run.dependsOn copyHtml

compileGroovy.enabled = false


startScripts {

    doLast {

        if (!macosx) unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')

        windowsScript.text = windowsScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')

    }

}


if (hasProperty('debugRun') && ((project.debugRun as boolean))) {

    run {

        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'

    }

}