import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        mavenLocal()
    }

    dependencies {
        classpath 'org.codehaus.griffon:gradle-griffon-plugin:2.16.0'
        classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
        classpath 'gradle.plugin.net.nemerosa:versioning:2.15.1'
        classpath 'org.kordamp.gradle:enforcer-gradle-plugin:0.9.0'
    }
}

apply plugin: 'groovy'
apply plugin: 'org.codehaus.griffon.griffon'
apply plugin: 'net.nemerosa.versioning'
apply plugin: 'org.kordamp.gradle.project-enforcer'

enforce {
    rule(enforcer.rules.AlwaysPass) { r ->
        r.enabled
        r.enforcerLevel
        r.message
        r.phases
    }
}
Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    macosx = System.getProperty('os.name').contains('Mac OS')
}

griffon {
    disableDependencyResolution = false
    includeGroovyDependencies = false
    version = '2.16.0'
    toolkit = 'swing'
    applicationProperties = [
        'build_date'    : buildDate,
        'build_time'    : buildTime,
        'build_revision': versioning.info.commit
    ]
}

mainClassName = 'com.spw.rr.Launcher'

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-quality.gradle'
apply plugin: 'com.github.ben-manes.versions'

dependencies {
    api "org.codehaus.griffon:griffon-guice:${griffon.version.get()}"
    runtimeOnly group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.32'
    //runtimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    testImplementation "org.codehaus.griffon:griffon-fest-test:${griffon.version.get()}"
    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
}

compileJava.options.annotationProcessorPath = configurations.annotationProcessor
compileGroovy.enabled = false

task copyHtml(type: Copy) {
    from "../docs/target/generated-docs/html5"
    into "build/resources/main"
}

run.dependsOn copyHtml

startScripts {
    doLast {
        if (!macosx) unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
        windowsScript.text = windowsScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
    }
}

if (hasProperty('debugRun') && ((project.debugRun as boolean))) {
    run {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }
}